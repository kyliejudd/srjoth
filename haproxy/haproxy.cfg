global   
        
	
	stats socket /run/haproxy/admin.sock mode 660 level admin
        log stdout format raw local0 #log to stdout so we can capture with docker logs
        stats timeout 30s
        daemon
        tune.ssl.default-dh-param 2048

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy

        #This config is commented out as radarr and sonarr don't seem to suport tls.1.3 when connecting to jackett. 
        #ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tlsv12 no-tls-tickets
        #ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tlsv12 no-tls-tickets

        ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
        ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        
        option  dontlognull # dont log rubbish requests
        timeout connect 7s
        timeout client  30s
        timeout server  30s
        #prevent slow loris attacks
        timeout http-request 6s
        #time out when backend maxxcons are reached
        timeout queue 30s
        timeout check 5s
        #slightly less than sysctl setting 
        backlog 192
        #

        errorfile 400 /usr/local/etc/haproxy/errors/400.http
        errorfile 403 /usr/local/etc/haproxy/errors/403.http
        errorfile 408 /usr/local/etc/haproxy/errors/408.http
        errorfile 500 /usr/local/etc/haproxy/errors/500.http
        errorfile 502 /usr/local/etc/haproxy/errors/502.http
        errorfile 503 /usr/local/etc/haproxy/errors/503.http
        errorfile 504 /usr/local/etc/haproxy/errors/504.http


#########################################################
#
#Frontend
#
#########################################################

frontend web
    mode    http
    bind    :443 ssl crt /etc/ssl/private/
    bind    :80
   # option httplog

    # HSTS (15768000 seconds = 6 months)
    http-response set-header Strict-Transport-Security max-age=15768000
    
    #this is the same as the httplog format but also logs the TLS version and cipher used.
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %sslc %sslv"
    option forwardfor

    ## set size of stick table to 1mb and expire after 10 secs, attempt to rate limit
    stick-table type ip size 1m expire 10s store gpc0,http_req_rate(10s)
    tcp-request connection track-sc1 src
    tcp-request connection reject if { src_get_gpc0 gt 0 }
    
    capture response header Location   len 32
    capture response header Set-Cookie  len 32
    capture request header Host len 40
    capture request header X-Forwarded-For len 50
    capture request header Accept-Language len 50
    capture request header Referer len 200
    capture request header User-Agent len 200
    capture response header Content-Type len 30
    capture response header Content-Encoding len 10
    capture response header Cache-Control len 200
    capture response header Last-Modified len 200


####
    #ACLS 
    ####
    acl secured_cookie res.hdr(Set-Cookie),lower -m sub secure
    redirect scheme https code 301 if !{ ssl_fc }
    use_backend sonarr if { ssl_fc_sni sonarr.example.com } # content switching based on SNI
    use_backend radarr if { ssl_fc_sni radarr.example.com } # content switching based on SNI
    use_backend jackett if { ssl_fc_sni jackett.example.com } # content switching based on SNI
    use_backend transmission if { ssl_fc_sni transmission.example.com } # content switching based on SNI
     
    default_backend nomatch

############################################################# 
#
#backends
#############################################################



backend sonarr
   mode http
   acl abuse src_http_req_rate(web) ge 5000
   acl flag_abuser src_inc_gpc0(web) ge 5000
   tcp-request content reject if abuse flag_abuser
   server localhost sonarr:8989
   option httpchk HEAD /

backend radarr
   mode http
   acl abuse src_http_req_rate(web) ge 5000
   acl flag_abuser src_inc_gpc0(web) ge 5000
   tcp-request content reject if abuse flag_abuser
   server localhost radarr:7878
   option httpchk HEAD /

backend jackett
   mode http
   acl abuse src_http_req_rate(web) ge 5000
   acl flag_abuser src_inc_gpc0(web) ge 5000
   tcp-request content reject if abuse flag_abuser
   server localhost jackett:9117
   option httpchk HEAD /

backend transmission
   mode http
   acl abuse src_http_req_rate(web) ge 5000
   acl flag_abuser src_inc_gpc0(web) ge 5000
   tcp-request content reject if abuse flag_abuser
   server localhost transmission:9091
   option httpchk HEAD /

backend nomatch
   timeout connect 3s
   timeout server 5s
   errorfile 503 /usr/local/etc/haproxy/errors/503.http

